snippet test
	<?php

	namespace ${1};

	use PHPUnit_Framework_TestCase;

	final class ${2} extends PHPUnit_Framework_TestCase
	{
		public function setUp()
		{
			$this->${3} = new ${4};
		}
	}
snippet pubfun
	public function ${1}()
	{
		${2}
	}
snippet valueobject
	<?php

	namespace ${1};

	final class ${2}
	{
		private $params;

		private function __construct(array $params)
		{
			${3}
		}

		public static function withAttributes(array $params)
		{
			return new self($params);
		}
	}
snippet php
	<?php

	namespace ${1};

	final class ${2}
	{
		private function __construct()
		{
			${3}
		}
	}
snippet const
	const ${1} = "${2}";
snippet assTrue
	$this->assertTrue(${1});
snippet assFalse
	$this->assertFalse(${1});
snippet assEquals
	$this->assertEquals(${1}, ${2});
snippet assSame
	$this->assertSame(${1}, ${2});
snippet phplog
	error_log(var_export(${1}, true));
snippet runtime
	throw new RuntimeException(
		'${1}'
	);
snippet expext
	$this->${1}->expects($this->${2})
		->method('${3}')
		->with(${4})
		->will(${5});
snippet todo
	/** @todo ${1} */
snippet var
	/** @var ${1} */
snippet if
	if (${1}) {
		${2};
	}
